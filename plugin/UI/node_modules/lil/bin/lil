#!/usr/bin/env node
var io = require('socket.io'),
    fs = require('fs'),
    http = require('http'),
    mime = require('mime');


var PREFIX = __dirname + '/..';
var JQUERY = PREFIX+'/third-party/lil-jquery-1.7.min.js';

var HTTP_PORT   = 8000;
var SOCKET_PORT = 8001;

var HEAD_INJECT = fs.readFileSync(PREFIX+'/inject/head-inject.html').toString()
                    .replace(/%PORT%/g, SOCKET_PORT)
                    .replace(/%JQUERY%/g, fs.readFileSync(JQUERY))

var BODY_INJECT = fs.readFileSync(PREFIX+'/inject/body-inject.html');

var JS_BEGIN    = fs.readFileSync(PREFIX+'/inject/js-begin.js');
var JS_END      = fs.readFileSync(PREFIX+'/inject/js-end.js');

var js = [], jsWatcher;
var css = [], cssWatcher;
var htmlWatcher;
var socket;

var server = io.listen(SOCKET_PORT);
server.set('log level', 0);
server.sockets.on('connection', function (_socket) {
  socket = _socket;
});

var file = process.cwd() + '/index.html';
findWatchFiles(file);

http.createServer(onRequest).listen(HTTP_PORT);

function onRequest(req, res) {

  var url = req.url;

  if (endsWidth(url, '/')) {
    url += 'index.html';
  }

  url = '.' + url;
  var reqURL = localPath(url);

  type = mime.lookup(url);

  try { 
    content = fs.readFileSync(url);
  } catch (e) {
    console.log('404 ' + url);
    res.writeHead(404);
    res.end();
    return;
  }

  if (type == 'text/html') {
    
    // if serving html, inject socketio and lil boilerplate
    content = content.toString().replace(/<head>/i, '<head>'+HEAD_INJECT);
    content = content.toString().replace(/<\/body>/i, BODY_INJECT+'</body>');

  } else if (type == 'application/javascript') {

    // if serving js inject lil wrapper
    content = JS_BEGIN.toString().replace(/%FILENAME%/, reqURL) + content.toString() + JS_END;

    content = content.replace(/appendChild\((.*)\)/i, function(str, $1) {
      return '_appendChild(\''+reqURL+'\')('+$1+')';
    });

    content = content.replace(/addEventListener\((.*)\)/i, function(str, $1) {
      return '_addEventListener(\''+reqURL+'\')('+$1+')';
    });

  }

  res.writeHead(200, {'Content-Type': type});
  res.end(content);
  
  console.log('Serving ' + url);

}

function findWatchFiles(file) {

  js.length = 0;
  css.length = 0;

  if (htmlWatcher) htmlWatcher.close();
  htmlWatcher = fs.watch(file, function() {
    findWatchFiles(file);
    emit('reload');
  });

  fs.readFile(file, 'utf-8', onReadHtml);

  function onReadHtml(err, html) {
    if (err) return; // todo
  //   jsdom.env(html, [ JQUERY ], onParseHtml);
  // }

  // function onParseHtml(errors, window) {

    // window.$('script').each(function(k, script) {
    //   var src = script.src;
    //   if (isLocalAsset(src) && src !== JQUERY) {
    //     js.push(src);
    //   }
    // });

    // window.$('link[rel=stylesheet]').each(function(k, stylesheet) {
    //   if (isLocalAsset(stylesheet.href)) {
    //     css.push(stylesheet.href);
    //   }
    // });

    html.replace(new RegExp('<script .*src="([^=]+)".*>', 'gi'), function(str, $1) {
      if (isLocalAsset($1)) js.push(localPath($1));
    });
    html.replace(new RegExp('<link .*href="([^=]+)".*>', 'gi'), function(str, $1) {
      if (isLocalAsset($1)) css.push(localPath($1));
    });

    if (jsWatcher) jsWatcher.close();
    jsWatcher = watch(js, function(src) {
      return function(event) {
        emit('js', {
          type: event,
          target: src
        });
      }
    });

    if (cssWatcher) cssWatcher.close();
    cssWatcher = watch(css, function(src) {
      return function(event) {
        emit('css', {
          type: event,
          target: src
        });
      }
    });

  }

  function watch(collection, onChange) {
    
    var watchers = [];

    collection.forEach(function(src) {
      
      try {
        watcher = fs.watch(src, onChange(src));
        console.log('Watching ' + src);
        watchers.push(watcher);
      } catch(e) {
        console.log('Watch fail ' + src);
      }
    });

    return {
      close: function() {
        watchers.forEach(function(w) {
          w.close();
        });
      }
    };

  }

}


function emit(event, data) {
  if (socket) socket.emit(event, data);
}

function localPath(path) {
  try { 
    path = fs.realpathSync(path)
  } catch (e) {
    
  }
  return '.'+path.replace(process.cwd(), '');
}

function isLocalAsset(src) {
  return src &&
         src.indexOf('http://')  !== 0 &&
         src.indexOf('https://') !== 0;
}

function endsWidth(str, suffix) {
    return str.match(suffix+"$")==suffix;
}